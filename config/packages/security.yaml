security:
# https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

# role_hierarchy 定义了角色的层次结构
    role_hierarchy:
        ROLE_ADMIN: ROLE_USER
        ROLE_SUPER_ADMIN: ROLE_ADMIN
        
# providers 定义了一个内存中的用户提供者，其中包含三个用户，各自拥有不同的角色。
    providers:
        in_memory:
            memory:
                users:
                    user:
                        password: 'userpass'
                        roles: 'ROLE_USER'
                    admin:
                        password: 'adminpass'
                        roles: 'ROLE_ADMIN'
                    superadmin:
                        password: 'superadminpass'
                        roles: 'ROLE_SUPER_ADMIN'
    
# firewalls 定义了安全防火墙和登录、注销路径。
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        
        main:
            lazy: true
            provider: in_memory
            form_login:
                login_path: login
                check_path: login
                default_target_path: dashboard # 确保这里重定向到用户有权限访问的页面

            logout:
                path: logout
                target: login

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/dashboard, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/superadmin, roles: ROLE_SUPER_ADMIN } 

        

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
